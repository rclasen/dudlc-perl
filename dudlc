#!/usr/bin/perl -w

use strict;
use warnings;

BEGIN {
	$ENV{ANYEVENT_DUDLC_DEBUG} = 1;
}

use AnyEvent::Loop;
use AnyEvent::Dudlc;
use Data::Dumper;
use Devel::Cycle;
use Scalar::Util;
use Devel::Leak;

my $handle;
#my $count = Devel::Leak::NoteSV($handle);


my $done;

my $dudl = AnyEvent::Dudlc->new(
	host		=> 'localhost',
	user		=> 'lirc',
	pass		=> 'lirc',
	on_connected	=> sub {
		my( $self, $rh, $rp ) = @_;
		my( $lp, $lh ) = $self->getsockname;
		print STDERR "connected from $lh:$lp to $rh:$rp\n";
	},
	on_authenticated	=> sub {
		print STDERR "authenticated\n";
	},
	on_error	=> sub {
		my( $msg, $self ) = @_;
		print STDERR "error: $msg\n";
	},
	on_disconnect	=> sub {
		print STDERR "disconnected\n";
	},
	on_status	=> sub {
		print "status: @_\n";
	},
	on_filter	=> sub {
		print "filter: @_\n";
	},
	on_track	=> sub {
		print "track: TODO\n";
	},
);

Scalar::Util::weaken( my $weak = $dudl );

my $a = AnyEvent->timer(
	after	=> 5,
	cb	=> sub {
		print STDERR "timer\n";
		$weak->sfilterlist( sub {
			print Dumper(@_);
		});
		$weak->filterset( 'tag="hot"', sub {
			print "filterset: @_\n";
			$weak->filter( sub{
				print "filter: @_\n";
			});
		});
	},
);
my $b = AnyEvent->timer(
	after	=> 20,
	cb	=> sub {
		++$done;
		$weak->pause;
	},
);


while( ! $done ){
	AnyEvent::Loop::one_event;
}

find_cycle( $dudl);
undef $dudl;

#Devel::Leak::CheckSV($handle);

